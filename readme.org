** Gestion des secrets
Déplacer la définition du mot de passe admin de la variable d'environnement à un secret.

 [[https://docs.docker.com/reference/compose-file/secrets/][secrets]]

Le mot de passe est actuellement utilisé dans [[https://plmlab.math.cnrs.fr/anf2024/grr-docker/-/blob/main/init/scripts/init_db.sh?ref_type=heads][=init/scripts/init_db.sh=]] à partir de la variable ~GRR_ADMIN_PASSWORD~ définie dans le ~.env~.

#+REVEAL: split

1. définissez un secret dans le fichier compose.yaml
2. rendez-le accessible au service ~init~
3. modifier le script lancé par le service init

** Tester à tout instant

#+begin_src bash
docker run -ti --rm init /bin/bash
env # see environment
#+end_src
** Définir un secret
~secrets~ est un clef à mettre à la racine du fichier [[file:compose.yaml][compose.yaml]]

#+begin_src yaml
secrets:
  grr_admin_password:
    environment:
      GRR_ADMIN_PASSWORD
#+end_src

Ici, on définit le secret ~grr_admin_password~ pour l'application, à partir du contenu de la variable d'environnement ~GRR_ADMIN_PASSWORD~

** Enlever l'exposition de la variable d'environnement ~GRR_ADMIN_PASSWORD~
Pour cela :
#+begin_src diff
     environment:
-      <<: [*cenv, *grr]  # https://yaml.org/type/merge.html
+      <<: [*cenv]        # https://yaml.org/type/merge.html
#+end_src

Vérifier que la variable d'environnement GRR_ADMIN_PASSWORD n'est plus définie dans ~init~.

** Rendre le secret accessible

Dans le service ~init~ :

#+begin_src diff
services:
  init:
    environment:
      <<: [*cenv]
+    secrets:
+      - grr_admin_password
#+end_src

Vérifier que le fichier ~/var/run/secrets~ a bien été définie avec le contenu correct.

** Adapter le script
Il suffit de redéfinir la variable à partir du fichier :
#+begin_src diff
+GRR_ADMIN_PASSWORD="$(cat /var/run/secrets/grr_admin_password)"
 if ! is_sourced; then
#+end_src

** Retester from scratch

#+begin_src bash
docker compose down --volumes
docker compose up

#+end_src
